legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) +
coord_flip()
forest2 <- ggplot(data = forestDf2, aes(x = condition, y = Mean)) +
geom_pointrange(aes(col = condition, ymin = Mean - SD, ymax = Mean + SD), size = 0.15) +
geom_hline(aes(fill = condition), yintercept = 0, linetype = 2) +
ggtitle("After mash") +
ylim(c(ylimL, ylimU)) +
xlab("Condition") +
ylab("Posterior Mean ("%&%tmpPid%&%"-"%&%tmpSid%&%")") +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD, col = condition), width = 0.3, cex = 0.8) +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.text.x = element_text(size = 10),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
strip.text.y = element_text(hjust = 0.5, vjust = 0, size = 12),
strip.background.x = element_blank(),
strip.background.y = element_blank(),
panel.background = element_rect(fill = "grey93"),
strip.placement = "outside",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) +
coord_flip()
pptx <- add_slide(pptx, layout = "Blank", master = "Office Theme")
phl_with_gg(pptx, olay, 1, forest1)
phl_with_gg(pptx, olay, 2, forest2)
}
print(pptx, target = "/Volumes/yangili1/zpmu/meta_analysis/scripts/mashrWorkflow/output/beforeVsAfter_mleV.pptx")
rowSmallest <- apply(lfsr, 1, min)
sigBeforeB <- beforeB[names(sort(rowSmallest)), ]
sigBeforeS <- beforeS[names(sort(rowSmallest)), ]
sigAfterB <- afterB[names(sort(rowSmallest)), ]
sigAfterS <- afterS[names(sort(rowSmallest)), ]
genes <- sapply(strsplit(rownames(sigBeforeB), split = "_"), "[[", 1)
snps <- gsub("ENSG[0-9]+_", replacement = "", rownames(sigBeforeB))
gsPair <- data.frame(genes, snps, stringsAsFactors = F)
rownames(sigBeforeB) <- rownames(sigBeforeS) <- rownames(sigAfterB) <- rownames(sigAfterS) <- genes
geneName <- read.table("/Volumes/yangili1/yangili/immuneatlas/scripts/gencode.v28.annotation.gnames.txt",
header = F, stringsAsFactors = F)
geneName$V1 <- sapply(strsplit(geneName$V1, split = "[.]"), "[[", 1)
nameVec <- geneName$V2
names(nameVec) <- geneName$V1
rownames(sigBeforeB) <- rownames(sigBeforeS) <- rownames(sigAfterB) <- rownames(sigAfterS) <- nameVec[rownames(sigBeforeB)]
gsPair$genes <- nameVec[gsPair$genes]
colnames(sigBeforeB) <- colnames(sigBeforeS) <- colnames(sigAfterB) <- colnames(sigAfterS) <- c("Monocyte", "Neutrophil", "Tcell", "AF-L", "AF-NI", "AF-S", "EU-S", "EU-L", "EU-NI")
sigBeforeB <- sigBeforeB[, c("Monocyte", "Neutrophil", "Tcell", "AF-NI", "AF-L", "AF-S", "EU-NI", "EU-L", "EU-S")]
sigBeforeS <- sigBeforeS[, c("Monocyte", "Neutrophil", "Tcell", "AF-NI", "AF-L", "AF-S", "EU-NI", "EU-L", "EU-S")]
sigAfterB <- sigAfterB[, c("Monocyte", "Neutrophil", "Tcell", "AF-NI", "AF-L", "AF-S", "EU-NI", "EU-L", "EU-S")]
sigAfterS <- sigAfterS[, c("Monocyte", "Neutrophil", "Tcell", "AF-NI", "AF-L", "AF-S", "EU-NI", "EU-L", "EU-S")]
View(sigAfterB)
pptx <- read_pptx()
for (i in 1:30) {
tmpPid <- rownames(sigBeforeB)[i]
tmpSid <- gsPair$snps[gsPair$genes == tmpPid]
myLay <- lay_new(matrix(1:4, ncol = 2), widths = c(1, 1))
olay <- phl_layout(myLay)
forestDf1 <- data.frame(Mean = sigBeforeB[tmpPid, ],
SD = sigBeforeS[tmpPid, ],
condition = colnames(sigBeforeB),
stringsAsFactors = F)
forestDf2 <- data.frame(Mean = sigAfterB[tmpPid, ],
SD = sigAfterS[tmpPid, ],
condition = colnames(sigBeforeB),
stringsAsFactors = F)
ylimL <- min(forestDf1$Mean - forestDf1$SD, forestDf2$Mean - forestDf2$SD) - 0.1
ylimU <- max(forestDf1$Mean + forestDf1$SD, forestDf2$Mean + forestDf2$SD) + 0.1
forest1 <- ggplot(data = forestDf1, aes(x = condition, y = Mean)) +
geom_pointrange(aes(col = condition, ymin = Mean - SD, ymax = Mean + SD), size = 0.15) +
geom_hline(aes(fill = condition), yintercept = 0, linetype = 2) +
ggtitle("Before mash") +
ylim(c(ylimL, ylimU)) +
xlab("Condition") +
ylab("Posterior Mean ("%&%tmpPid%&%"-"%&%tmpSid%&%")") +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD, col = condition), width = 0.3, cex = 0.8) +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.text.x = element_text(size = 10),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
strip.text.y = element_text(hjust = 0.5, vjust = 0, size = 12),
strip.background.x = element_blank(),
strip.background.y = element_blank(),
strip.placement = "outside",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) +
coord_flip()
forest2 <- ggplot(data = forestDf2, aes(x = condition, y = Mean)) +
geom_pointrange(aes(col = condition, ymin = Mean - SD, ymax = Mean + SD), size = 0.15) +
geom_hline(aes(fill = condition), yintercept = 0, linetype = 2) +
ggtitle("After mash") +
ylim(c(ylimL, ylimU)) +
xlab("Condition") +
ylab("Posterior Mean ("%&%tmpPid%&%"-"%&%tmpSid%&%")") +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD, col = condition), width = 0.3, cex = 0.8) +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.text.x = element_text(size = 10),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
strip.text.y = element_text(hjust = 0.5, vjust = 0, size = 12),
strip.background.x = element_blank(),
strip.background.y = element_blank(),
strip.placement = "outside",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) +
coord_flip()
pptx <- add_slide(pptx, layout = "Blank", master = "Office Theme")
phl_with_gg(pptx, olay, 1, forest1)
phl_with_gg(pptx, olay, 2, forest2)
}
print(pptx, target = "/Volumes/yangili1/zpmu/meta_analysis/scripts/mashrWorkflow/output/beforeVsAfter_sig_mleV.pptx")
View(beforeB)
knitr::opts_chunk$set(collapse = TRUE, fig.width = 8,
fig.height = 4,fig.align = "center",
comment = "#")
source("../code/normfuncs.R")
thresh <- 0.05
out     <- readRDS("../fastqtl_to_mash_output/FastQTLSumStats.mash.rds")
maxbeta <- out$strong.b
maxz    <- out$strong.z
out <- readRDS("../mashr_flashr_workflow_output_Vmle/FastQTLSumStats.mash.EZ.FL_PC3.V_mle.posterior.rds")
lfsr           <- out$lfsr
pm.mash        <- out$PosteriorMean
standard.error <- maxbeta/maxz
pm.mash.beta   <- pm.mash * standard.error
sigmat <- (lfsr <= thresh)
nsig   <- rowSums(sigmat)
hist((het.func(het.norm(effectsize=pm.mash.beta[nsig>0,]),threshold=0.5)),
main="",xlab="",breaks=0.5:6.5,col="grey",freq=FALSE,ylim=c(0,0.9),
xaxt="n")
sigmat <- (lfsr <= thresh)
nsig   <- rowSums(sigmat)
hist((het.func(het.norm(effectsize=pm.mash.beta[nsig>0,]),threshold=0.5)),
main="",xlab="",breaks=0.5:9.5,col="grey",freq=FALSE,ylim=c(0,0.9),
xaxt="n")
axis(1,at = seq(1, 9, by=1),labels = c(1:9))
sign.func <- function (normeffectsize)
apply(normeffectsize,1,function(x)(sum(x>0)))
sigmat <- (lfsr<=thresh)
nsig   <- rowSums(sigmat)
hist(sign.func(het.norm(effectsize=pm.mash.beta[nsig>0,])),main="",xlab="",
breaks=0.5:9.5,col="grey",freq=FALSE,xaxt="n",ylim=c(0,0.9))
axis(1, at=seq(1, 9, by=1), labels=c(1:9))
out      <- readRDS("../fastqtl_to_mash_output/FastQTLSumStats.mash.rds")
maxb     <- out$strong.b
maxz     <- out$strong.z
out      <- readRDS("../fastqtl_to_mash_output/FastQTLSumStats.mash.rds")
maxb     <- out$strong.b
maxz     <- out$strong.z
out      <-readRDS("../mashr_flashr_workflow_output_Vmle/FastQTLSumStats.mash.EZ.FL_PC3.V_mle.posterior.rds")
pm.mash        <- out$PosteriorMean
lfsr.all       <- out$lfsr
standard.error <- maxb/maxz
pm.mash.beta   <- pm.mash*standard.error
thresh       <- 0.05
pm.mash.beta <- pm.mash.beta[rowSums(lfsr.all<0.05)>0,]
lfsr.mash    <- lfsr.all[rowSums(lfsr.all<0.05)>0,]
shared.fold.size <- matrix(NA,nrow = ncol(lfsr.mash),ncol=ncol(lfsr.mash))
colnames(shared.fold.size) <- rownames(shared.fold.size) <- colnames(maxz)
A <- matrix(0,44,44)
for (i in 1:ncol(lfsr.mash))
for (j in 1:ncol(lfsr.mash)) {
sig.row=which(lfsr.mash[,i]<thresh)
sig.col=which(lfsr.mash[,j]<thresh)
a=(union(sig.row,sig.col))
A[i,j] <- length(a)
quotient=(pm.mash.beta[a,i]/pm.mash.beta[a,j])
shared.fold.size[i,j] = mean(quotient > 0.5 & quotient < 2)
}
clrs <- colorRampPalette(rev(c("#D73027","#FC8D59","#FEE090","#FFFFBF",
"#E0F3F8","#91BFDB","#4575B4")))(64)
shared.fold.size[lower.tri(shared.fold.size)] <- NA
n <- nrow(shared.fold.size)
print(levelplot(shared.fold.size[n:1,],col.regions = clrs,xlab = "",ylab = "",
colorkey = TRUE))
library(lattice)
clrs <- colorRampPalette(rev(c("#D73027","#FC8D59","#FEE090","#FFFFBF",
"#E0F3F8","#91BFDB","#4575B4")))(64)
shared.fold.size[lower.tri(shared.fold.size)] <- NA
n <- nrow(shared.fold.size)
print(levelplot(shared.fold.size[n:1,],col.regions = clrs,xlab = "",ylab = "",
colorkey = TRUE))
thresh       <- 0.05
pm.mash.beta <- pm.mash.beta[rowSums(lfsr.all<0.05)>0,]
out      <-readRDS("../mashr_flashr_workflow_output_Vmle/FastQTLSumStats.mash.EZ.FL_PC3.V_mle.posterior.rds")
pm.mash        <- out$PosteriorMean
lfsr.all       <- out$lfsr
standard.error <- maxb/maxz
pm.mash.beta   <- pm.mash*standard.error
thresh       <- 0.05
pm.mash.beta <- pm.mash.beta[rowSums(lfsr.all<0.05)>0,]
lfsr.mash    <- lfsr.all[rowSums(lfsr.all<0.05)>0,]
shared.fold.size <- matrix(NA,nrow = ncol(lfsr.mash),ncol=ncol(lfsr.mash))
colnames(shared.fold.size) <- rownames(shared.fold.size) <- colnames(maxz)
A <- matrix(0,9,9)
for (i in 1:ncol(lfsr.mash))
for (j in 1:ncol(lfsr.mash)) {
sig.row=which(lfsr.mash[,i]<thresh)
sig.col=which(lfsr.mash[,j]<thresh)
a=(union(sig.row,sig.col))
A[i,j] <- length(a)
quotient=(pm.mash.beta[a,i]/pm.mash.beta[a,j])
shared.fold.size[i,j] = mean(quotient > 0.5 & quotient < 2)
}
clrs <- colorRampPalette(rev(c("#D73027","#FC8D59","#FEE090","#FFFFBF",
"#E0F3F8","#91BFDB","#4575B4")))(64)
shared.fold.size[lower.tri(shared.fold.size)] <- NA
n <- nrow(shared.fold.size)
print(levelplot(shared.fold.size[n:1,],col.regions = clrs,xlab = "",ylab = "",
colorkey = TRUE))
getwd()
out      <-readRDS("/Volumes/yangili1/zpmu/meta_analysis/scripts/mashrWorkflow/mashr_flashr_workflow_output_Vmle/FastQTLSumStats.mash.EZ.FL_PC3.V_mle.posterior.rds")
pm.mash        <- out$PosteriorMean
lfsr.all       <- out$lfsr
standard.error <- maxb/maxz
pm.mash.beta   <- pm.mash*standard.error
thresh       <- 0.05
pm.mash.beta <- pm.mash.beta[rowSums(lfsr.all<0.05)>0,]
lfsr.mash    <- lfsr.all[rowSums(lfsr.all<0.05)>0,]
shared.fold.size <- matrix(NA,nrow = ncol(lfsr.mash),ncol=ncol(lfsr.mash))
colnames(shared.fold.size) <- rownames(shared.fold.size) <- colnames(maxz)
A <- matrix(0,9,9)
for (i in 1:ncol(lfsr.mash))
for (j in 1:ncol(lfsr.mash)) {
sig.row=which(lfsr.mash[,i]<thresh)
sig.col=which(lfsr.mash[,j]<thresh)
a=(union(sig.row,sig.col))
A[i,j] <- length(a)
quotient=(pm.mash.beta[a,i]/pm.mash.beta[a,j])
shared.fold.size[i,j] = mean(quotient > 0.5 & quotient < 2)
}
clrs <- colorRampPalette(rev(c("#D73027","#FC8D59","#FEE090","#FFFFBF",
"#E0F3F8","#91BFDB","#4575B4")))(64)
shared.fold.size[lower.tri(shared.fold.size)] <- NA
n <- nrow(shared.fold.size)
print(levelplot(shared.fold.size[n:1,],col.regions = clrs,xlab = "",ylab = "",
colorkey = TRUE))
shared.fold.size
shared.fold.size[n:1,]
out      <-readRDS("/Volumes/yangili1/zpmu/meta_analysis/scripts/mashrWorkflow/mashr_flashr_workflow_output_Vmle/FastQTLSumStats.mash.EZ.FL_PC3.V_mle.posterior.rds")
pm.mash        <- out$PosteriorMean
lfsr.all       <- out$lfsr
standard.error <- maxb/maxz
pm.mash.beta   <- pm.mash*standard.error
out      <- readRDS("/Volumes/yangili1/zpmu/meta_analysis/scripts/mashrWorkflow/fastqtl_to_mash_output/FastQTLSumStats.mash.rds")
maxb     <- out$strong.b
maxz     <- out$strong.z
out      <-readRDS("/Volumes/yangili1/zpmu/meta_analysis/scripts/mashrWorkflow/mashr_flashr_workflow_output_Vmle/FastQTLSumStats.mash.EZ.FL_PC3.V_mle.posterior.rds")
pm.mash        <- out$PosteriorMean
lfsr.all       <- out$lfsr
standard.error <- maxb/maxz
pm.mash.beta   <- pm.mash*standard.error
thresh       <- 0.05
pm.mash.beta <- pm.mash.beta[rowSums(lfsr.all<0.05)>0,]
lfsr.mash    <- lfsr.all[rowSums(lfsr.all<0.05)>0,]
shared.fold.size <- matrix(NA,nrow = ncol(lfsr.mash),ncol=ncol(lfsr.mash))
colnames(shared.fold.size) <- rownames(shared.fold.size) <- colnames(maxz)
A <- matrix(0,9,9)
for (i in 1:ncol(lfsr.mash))
for (j in 1:ncol(lfsr.mash)) {
sig.row=which(lfsr.mash[,i]<thresh)
sig.col=which(lfsr.mash[,j]<thresh)
a=(union(sig.row,sig.col))
A[i,j] <- length(a)
quotient=(pm.mash.beta[a,i]/pm.mash.beta[a,j])
shared.fold.size[i,j] = mean(quotient > 0.5 & quotient < 2)
}
clrs <- colorRampPalette(rev(c("#D73027","#FC8D59","#FEE090","#FFFFBF",
"#E0F3F8","#91BFDB","#4575B4")))(64)
shared.fold.size[lower.tri(shared.fold.size)] <- NA
n <- nrow(shared.fold.size)
print(levelplot(shared.fold.size[n:1,],col.regions = clrs,xlab = "",ylab = "",
colorkey = TRUE))
View(pm.mash.beta)
lfsr.mash    <- lfsr.all[rowSums(lfsr.all<0.05)>0,]
View(lfsr.mash)
shared.fold.size <- matrix(NA,nrow = ncol(lfsr.mash),ncol=ncol(lfsr.mash))
colnames(shared.fold.size) <- rownames(shared.fold.size) <- colnames(maxz)
View(shared.fold.size)
A <- matrix(0,9,9)
for (i in 1:ncol(lfsr.mash))
for (j in 1:ncol(lfsr.mash)) {
sig.row=which(lfsr.mash[,i]<thresh)
sig.col=which(lfsr.mash[,j]<thresh)
a=(union(sig.row,sig.col))
A[i,j] <- length(a)
quotient=(pm.mash.beta[a,i]/pm.mash.beta[a,j])
shared.fold.size[i,j] = mean(quotient > 0.5 & quotient < 2)
}
thresh       <- 0.05
pm.mash.beta <- pm.mash.beta[rowSums(lfsr.all<0.05)>0,]
out      <-readRDS("/Volumes/yangili1/zpmu/meta_analysis/scripts/mashrWorkflow/mashr_flashr_workflow_output_Vmle/FastQTLSumStats.mash.EZ.FL_PC3.V_mle.posterior.rds")
pm.mash        <- out$PosteriorMean
lfsr.all       <- out$lfsr
standard.error <- maxb/maxz
pm.mash.beta   <- pm.mash*standard.error
thresh       <- 0.05
pm.mash.beta <- pm.mash.beta[rowSums(lfsr.all<0.05)>0,]
lfsr.mash    <- lfsr.all[rowSums(lfsr.all<0.05)>0,]
shared.fold.size <- matrix(NA,nrow = ncol(lfsr.mash),ncol=ncol(lfsr.mash))
colnames(shared.fold.size) <- rownames(shared.fold.size) <- colnames(maxz)
A <- matrix(0,9,9)
for (i in 1:ncol(lfsr.mash)) {
for (j in 1:ncol(lfsr.mash)) {
sig.row=which(lfsr.mash[,i]<thresh)
sig.col=which(lfsr.mash[,j]<thresh)
a=(union(sig.row,sig.col))
A[i,j] <- length(a)
quotient=(pm.mash.beta[a,i]/pm.mash.beta[a,j])
shared.fold.size[i,j] = mean(quotient > 0.5 & quotient < 2)
}
pm.mash        <- out$PosteriorMean
lfsr.all       <- out$lfsr
standard.error <- maxb/maxz
pm.mash.beta   <- pm.mash*standard.error
thresh       <- 0.05
pm.mash.beta <- pm.mash.beta[rowSums(lfsr.all<0.05)>0,]
lfsr.mash    <- lfsr.all[rowSums(lfsr.all<0.05)>0,]
shared.fold.size <- matrix(NA,nrow = ncol(lfsr.mash),ncol=ncol(lfsr.mash))
colnames(shared.fold.size) <- rownames(shared.fold.size) <- colnames(maxz)
A <- matrix(0,9,9)
for (i in 1:ncol(lfsr.mash)) {
for (j in 1:ncol(lfsr.mash)) {
sig.row=which(lfsr.mash[,i]<thresh)
sig.col=which(lfsr.mash[,j]<thresh)
a=(union(sig.row,sig.col))
A[i,j] <- length(a)
quotient=(pm.mash.beta[a,i]/pm.mash.beta[a,j])
shared.fold.size[i,j] = mean(quotient > 0.5 & quotient < 2)
}
}
colnames(shared.fold.size) <- rownames(shared.fold.size) <- colnames(maxz)
A <- matrix(0,9,9)
shared.fold.size <- matrix(NA,nrow = ncol(lfsr.mash),ncol=ncol(lfsr.mash))
colnames(shared.fold.size) <- rownames(shared.fold.size) <- colnames(maxz)
A <- matrix(0,9,9)
i=1
j=1
sig.row=which(lfsr.mash[,i]<thresh)
sig.col=which(lfsr.mash[,j]<thresh)
a=(union(sig.row,sig.col))
A[i,j] <- length(a)
quotient=(pm.mash.beta[a,i]/pm.mash.beta[a,j])
shared.fold.size[i,j] = mean(quotient > 0.5 & quotient < 2)
mean(quotient > 0.5 & quotient < 2)
quotient > 0.5
quotient < 2
quotient > 0.5 & quotient < 2
mean(quotient > 0.5 & quotient < 2)
-=5
i=5
j=5
sig.row=which(lfsr.mash[,i]<thresh)
sig.col=which(lfsr.mash[,j]<thresh)
a=(union(sig.row,sig.col))
A[i,j] <- length(a)
quotient=(pm.mash.beta[a,i]/pm.mash.beta[a,j])
shared.fold.size[i,j] = mean(quotient > 0.5 & quotient < 2)
View(shared.fold.size)
mean(quotient > 0.5 & quotient < 2)
quotient > 0.5 & quotient < 2
i=1
j=1
sig.row=which(lfsr.mash[,i]<thresh)
sig.col=which(lfsr.mash[,j]<thresh)
a=(union(sig.row,sig.col))
A[i,j] <- length(a)
quotient=(pm.mash.beta[a,i]/pm.mash.beta[a,j])
shared.fold.size[i,j] = mean(quotient > 0.5 & quotient < 2)
which(is.na(quotient > 0.5 & quotient < 2))
View(pm.mash.beta)
View(lfsr.mash)
lfsr.mash["ENSG00000101307_20_1599142_C_T",]
quotient=(pm.mash.beta[a,i]/pm.mash.beta[a,j])
quotient
which(is.na(quotient))
quotient["ENSG00000101307_20_1599142_C_T"]
pm.mash.beta["ENSG00000101307_20_1599142_C_T",]
quotient = quotient[complete.cases(quotient), ]
quotient = quotient[complete.cases(quotient)]
thresh       <- 0.05
pm.mash.beta <- pm.mash.beta[rowSums(lfsr.all<0.05)>0,]
pm.mash        <- out$PosteriorMean
lfsr.all       <- out$lfsr
standard.error <- maxb/maxz
pm.mash.beta   <- pm.mash*standard.error
thresh       <- 0.05
pm.mash.beta <- pm.mash.beta[rowSums(lfsr.all<0.05)>0,]
lfsr.mash    <- lfsr.all[rowSums(lfsr.all<0.05)>0,]
shared.fold.size <- matrix(NA,nrow = ncol(lfsr.mash),ncol=ncol(lfsr.mash))
colnames(shared.fold.size) <- rownames(shared.fold.size) <- colnames(maxz)
A <- matrix(0,9,9)
for (i in 1:ncol(lfsr.mash)) {
for (j in 1:ncol(lfsr.mash)) {
sig.row=which(lfsr.mash[,i]<thresh)
sig.col=which(lfsr.mash[,j]<thresh)
a=(union(sig.row,sig.col))
A[i,j] <- length(a)
quotient=(pm.mash.beta[a,i]/pm.mash.beta[a,j])
quotient = quotient[complete.cases(quotient)]
shared.fold.size[i,j] = mean(quotient > 0.5 & quotient < 2)
}
}
clrs <- colorRampPalette(rev(c("#D73027","#FC8D59","#FEE090","#FFFFBF",
"#E0F3F8","#91BFDB","#4575B4")))(64)
shared.fold.size[lower.tri(shared.fold.size)] <- NA
n <- nrow(shared.fold.size)
print(levelplot(shared.fold.size[n:1,],col.regions = clrs,xlab = "",ylab = "",
colorkey = TRUE))
out      <- readRDS("/Volumes/yangili1/zpmu/meta_analysis/scripts/mashrWorkflow/fastqtl_to_mash_output/FastQTLSumStats.mash.rds")
maxb     <- out$strong.b
maxz     <- out$strong.z
out      <-readRDS("/Volumes/yangili1/zpmu/meta_analysis/scripts/mashrWorkflow/mashr_flashr_workflow_output_Vmle/FastQTLSumStats.mash.EZ.FL_PC3.V_mle.posterior.rds")
pm.mash        <- out$PosteriorMean
lfsr.all       <- out$lfsr
standard.error <- maxb/maxz
pm.mash.beta   <- pm.mash*standard.error
thresh=0.05
pm.mash.beta=pm.mash.beta[rowSums(lfsr.all<0.05)>0,]
lfsr.mash=lfsr.all[rowSums(lfsr.all<0.05)>0,]
shared.fold.size=matrix(NA,nrow = ncol(lfsr.mash),ncol=ncol(lfsr.mash))
colnames(shared.fold.size)=rownames(shared.fold.size)=colnames(maxz)
for(i in 1:ncol(lfsr.mash)){
for(j in 1:ncol(lfsr.mash)){
sig.row=which(lfsr.mash[,i]<thresh)
sig.col=which(lfsr.mash[,j]<thresh)
a=(union(sig.row,sig.col))
quotient=(pm.mash.beta[a,i]/pm.mash.beta[a,j])
shared.fold.size[i,j]=mean(quotient > 0)
}
}
shared.fold.size[lower.tri(shared.fold.size)] <- NA
clrs <- colorRampPalette(rev(c("#D73027","#FC8D59","#FEE090","#FFFFBF",
"#E0F3F8","#91BFDB","#4575B4")))(64)
n=nrow(shared.fold.size)
print(levelplot(shared.fold.size[n:1,],xlab = "",col.regions = clrs,ylab = "",
colorkey = TRUE))
thresh=0.05
pm.mash.beta=pm.mash.beta[rowSums(lfsr.all<0.05)>0,]
pm.mash        <- out$PosteriorMean
lfsr.all       <- out$lfsr
standard.error <- maxb/maxz
pm.mash.beta   <- pm.mash*standard.error
thresh=0.05
pm.mash.beta=pm.mash.beta[rowSums(lfsr.all<0.05)>0,]
lfsr.mash=lfsr.all[rowSums(lfsr.all<0.05)>0,]
shared.fold.size=matrix(NA,nrow = ncol(lfsr.mash),ncol=ncol(lfsr.mash))
colnames(shared.fold.size)=rownames(shared.fold.size)=colnames(maxz)
for(i in 1:ncol(lfsr.mash)){
for(j in 1:ncol(lfsr.mash)){
sig.row=which(lfsr.mash[,i]<thresh)
sig.col=which(lfsr.mash[,j]<thresh)
a=(union(sig.row,sig.col))
quotient=(pm.mash.beta[a,i]/pm.mash.beta[a,j])
quotient = quotient[complete.cases(quotient)]
shared.fold.size[i,j]=mean(quotient > 0)
}
}
shared.fold.size[lower.tri(shared.fold.size)] <- NA
clrs <- colorRampPalette(rev(c("#D73027","#FC8D59","#FEE090","#FFFFBF",
"#E0F3F8","#91BFDB","#4575B4")))(64)
n=nrow(shared.fold.size)
print(levelplot(shared.fold.size[n:1,],xlab = "",col.regions = clrs,ylab = "",
colorkey = TRUE))
clrs <- colorRampPalette(rev(c("#D73027","#FC8D59","#FEE090","#FFFFBF",
"#E0F3F8","#91BFDB","#4575B4")))(80)
shared.fold.size[lower.tri(shared.fold.size)] <- NA
n <- nrow(shared.fold.size)
print(levelplot(shared.fold.size[n:1,],col.regions = clrs,xlab = "",ylab = "",
colorkey = TRUE))
clrs <- colorRampPalette(rev(c("#D73027","#FC8D59","#FEE090","#FFFFBF",
"#E0F3F8","#91BFDB","#4575B4")))(64)
shared.fold.size[lower.tri(shared.fold.size)] <- NA
n <- nrow(shared.fold.size)
print(levelplot(shared.fold.size[n:1,],col.regions = clrs,xlab = "",ylab = "",
colorkey = TRUE))
out      <- readRDS("/Volumes/yangili1/zpmu/meta_analysis/scripts/mashrWorkflow/fastqtl_to_mash_output/FastQTLSumStats.mash.rds")
maxb     <- out$strong.b
maxz     <- out$strong.z
out      <-readRDS("/Volumes/yangili1/zpmu/meta_analysis/scripts/mashrWorkflow/mashr_flashr_workflow_output_Vmle/FastQTLSumStats.mash.EZ.FL_PC3.V_mle.posterior.rds")
pm.mash        <- out$PosteriorMean
lfsr.all       <- out$lfsr
standard.error <- maxb/maxz
pm.mash.beta   <- pm.mash*standard.error
nsig                <- rowSums(lfsr.mash < thresh)
pm.mash.beta.norm   <- het.norm(effectsize = pm.mash.beta) # normalize by the largest effect
pm.mash.beta.norm   <- pm.mash.beta.norm[nsig > 0,]
lfsr.mash           <- as.matrix(lfsr.mash[nsig > 0,])
colnames(lfsr.mash) <- colnames(maxz)
a         <- which(rowSums(pm.mash.beta.norm > 0.5) == 1)
lfsr.fold <- as.matrix(lfsr.mash[a,])
nsig                <- rowSums(lfsr.mash < thresh)
pm.mash.beta.norm   <- het.norm(effectsize = pm.mash.beta) # normalize by the largest effect
pm.mash.beta.norm   <- pm.mash.beta.norm[nsig > 0,]
lfsr.mash           <- as.matrix(lfsr.mash[nsig > 0,])
colnames(lfsr.mash) <- colnames(maxz)
a         <- which(rowSums(pm.mash.beta.norm > 0.5) == 1)
lfsr.fold <- as.matrix(lfsr.mash[a,])
a
range(a)
dim(lfsr.mash)
1-2e-3
setwd("~/Documents/myWebsite/content/")
library(blogdown)
build_site()
setwd("../")
build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
