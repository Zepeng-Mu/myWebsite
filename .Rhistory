knitr::opts_chunk$set(echo = TRUE)
aas <- charlist('ACDEFGHIKLMNPQRSTVWY')
# split a string into characters
charlist <- function(x,sep='') {
t(sapply(x, function(m) {unlist(strsplit(m,sep))})) }
pfold <- function(dGu) {
RT <- 0.6 # This is an approximation of RT around room temperature
p <- 1 / (1 + exp(-dGu / RT))
}
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddGu.i, dGu, N){
r.i <- pfold(dGu + ddGu.i)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
# r will take each of the r.i values in turn
(1-exp(-2*r)) / (1-exp(-2*N*r))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000) # N=1000
n1e6 <- eq.fix(ddgus, dgu.wt, 1e6) # N=1M
aas <- charlist('ACDEFGHIKLMNPQRSTVWY')
# Plot results
plot(1:20, n10, col='blue', type='l', ylim=c(0,1),
las=1, log='', xaxt='n', xlab='',
ylab='Frequency of allele') lines(1:20, n1000, col='red') lines(1:20, n1e6, col='black') mtext(aas, 1, at=1:20, line=1)
# split a string into characters
charlist <- function(x,sep='') {
t(sapply(x, function(m) {unlist(strsplit(m,sep))})) }
pfold <- function(dGu) {
RT <- 0.6 # This is an approximation of RT around room temperature
p <- 1 / (1 + exp(-dGu / RT))
}
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddGu.i, dGu, N){
r.i <- pfold(dGu + ddGu.i)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
# r will take each of the r.i values in turn
(1-exp(-2*r)) / (1-exp(-2*N*r))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000) # N=1000
n1e6 <- eq.fix(ddgus, dgu.wt, 1e6) # N=1M
aas <- charlist('ACDEFGHIKLMNPQRSTVWY')
# Plot results
plot(1:20, n10, col='blue', type='l', ylim=c(0,1),
las=1, log='', xaxt='n', xlab='',
ylab='Frequency of allele')
lines(1:20, n1000, col='red')
lines(1:20, n1e6, col='black')
mtext(aas, 1, at=1:20, line=1)
n1000
# split a string into characters
charlist <- function(x,sep='') {
t(sapply(x, function(m) {unlist(strsplit(m,sep))})) }
pfold <- function(dGu) {
RT <- 0.6 # This is an approximation of RT around room temperature
p <- 1 / (1 + exp(-dGu / RT))
}
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddGu.i, dGu, N){
r.i <- pfold(dGu + ddGu.i)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
# r will take each of the r.i values in turn
(1-exp(-2*r)) / (1-exp(-2*N*r))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000) # N=1000
n1e6 <- eq.fix(ddgus, dgu.wt, 1e6) # N=1M
aas <- charlist('ACDEFGHIKLMNPQRSTVWY')
# Plot results
plot(1:20, n10, col='blue', type='l', ylim=c(0,1),
las=1, log='', xaxt='n', xlab='',
ylab='Frequency of allele')
lines(1:20, n1000, col='red')
lines(1:20, n1e6, col='black')
mtext(aas, 1, at=1:20, line=1)
n1e6
n1000
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000) # N=1000
n1e6 <- eq.fix(ddgus, dgu.wt, 1e6) # N=1M
aas <- charlist('ACDEFGHIKLMNPQRSTVWY')
plot(1:20, n10, col='blue', type='l', ylim=c(0,1),
las=1, log='', xaxt='n', xlab='',
ylab='Frequency of allele')
lines(1:20, n1000, col='red')
lines(1:20, n1e6, col='black')
mtext(aas, 1, at=1:20, line=1)
# split a string into characters
charlist <- function(x,sep='') {
t(sapply(x, function(m) {unlist(strsplit(m,sep))})) }
pfold <- function(dGu) {
RT <- 0.6 # This is an approximation of RT around room temperature
p <- 1 / (1 + exp(-dGu / RT))
}
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddGu.i, dGu, N){
r.i <- pfold(dGu + ddGu.i)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
# r will take each of the r.i values in turn
(1-exp(-2*(r - pfold(dGu)))) / (1-exp(-2*N*(r - pfold(dGu))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000) # N=1000
n1e6 <- eq.fix(ddgus, dgu.wt, 1e6) # N=1M
aas <- charlist('ACDEFGHIKLMNPQRSTVWY')
# Plot results
plot(1:20, n10, col='blue', type='l', ylim=c(0,1),
las=1, log='', xaxt='n', xlab='',
ylab='Frequency of allele')
lines(1:20, n1000, col='red')
lines(1:20, n1e6, col='black')
mtext(aas, 1, at=1:20, line=1)
# split a string into characters
charlist <- function(x,sep='') {
t(sapply(x, function(m) {unlist(strsplit(m,sep))})) }
pfold <- function(dGu) {
RT <- 0.6 # This is an approximation of RT around room temperature
p <- 1 / (1 + exp(-dGu / RT))
}
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddGu.i, dGu, N){
r.i <- pfold(dGu + ddGu.i)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
# r will take each of the r.i values in turn
exp(2 * N * (r - pfold(dGu)))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000) # N=1000
n1e6 <- eq.fix(ddgus, dgu.wt, 1e6) # N=1M
aas <- charlist('ACDEFGHIKLMNPQRSTVWY')
# Plot results
plot(1:20, n10, col='blue', type='l', ylim=c(0,1),
las=1, log='', xaxt='n', xlab='',
ylab='Frequency of allele')
lines(1:20, n1000, col='red')
lines(1:20, n1e6, col='black')
mtext(aas, 1, at=1:20, line=1)
knitr::opts_chunk$set(fig.width = 5, fig.height = 4, fig.align = "center")
library(tidyverse)
# Transition matrix
A <- matrix(c(0.8675, 1-0.8675,
1-0.9605, 0.9605), ncol = 2, byrow = T)
rownames(A) <- c("open", "closed")
colnames(A) <- c("open", "closed")
# Emission probability (matrix)
B <- matrix(c(1-0.5125, 0.5125,
1-0.07797, 0.07797), ncol = 2, byrow = T)
rownames(B) <- c("open", "closed")
colnames(B) <- c("0", "1")
# Initial probability (vector)
Pi <- c(0.5, 0.5)
names(Pi) <- c("open", "closed")
# Function for the forward algorithm
# '@ A A matrix for transition probabilities
# '@ B A matrix for emission probabilities
# '@ Pi A vector for initial states
# '@ O A vector for observed data
ForwardAlgorithm <- function(A, B, Pi, O) {
# s for scaling alpha
s <- double(length = length(O))
# Initialization
current_alpha <- t(Pi * B[, O[1]]) # alpha is a row vector
s[1] <- sum(current_alpha)
current_alpha_hat <- current_alpha / s[1]
# Induction
for (i in 2:length(O)) {
new_alpha_tilde <- (current_alpha_hat %*% A) * B[, O[i]]
s[i] <- sum(new_alpha_tilde)
new_alpha_hat <- new_alpha_tilde / s[i]
current_alpha_hat <- new_alpha_hat
}
# Termination
return(s) # Likelihood equals the product of scaling factor s
}
dt <- read_table2("/Users/zpmu/Box/UChicago/courses/2019_winter/computation/homework/ps5/pottsData.txt",
col_names = F)
m = as.character(1 * (dt$X7 > 0)) # Binarilize the 7th column
s <- ForwardAlgorithm(A, B, Pi, m)
ln_likelihood <- sum(log(s)); ln_likelihood
knitr::opts_chunk$set(echo = TRUE)
# split a string into characters
charlist <- function(x,sep='') {
t(sapply(x, function(m) {unlist(strsplit(m,sep))})) }
pfold <- function(dGu) {
RT <- 0.6 # This is an approximation of RT around room temperature
p <- 1 / (1 + exp(-dGu / RT))
}
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddGu.i, dGu, N){
r.i <- pfold(dGu + ddGu.i)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
# r will take each of the r.i values in turn
exp(2 * N * (r - pfold(dGu)))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000) # N=1000
n1e6 <- eq.fix(ddgus, dgu.wt, 1e6) # N=1M
aas <- charlist('ACDEFGHIKLMNPQRSTVWY')
# Plot results
plot(1:20, n10, col='blue', type='l', ylim=c(0,1),
las=1, log='', xaxt='n', xlab='',
ylab='Frequency of allele')
lines(1:20, n1000, col='red')
lines(1:20, n1e6, col='black')
mtext(aas, 1, at=1:20, line=1)
library(blogdown)
install.packages("blogdown")
library(blogdown)
?new_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
setwd("~/Documents/myWebsite/")
blogdown:::new_post_addin()
blogdown:::serve_site()
